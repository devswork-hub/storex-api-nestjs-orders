# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BillingAddressInput {
  city: String!
  state: String!
  street: String!
  zipCode: String!
}

type BillingAddressOutput {
  city: String!
  state: String!
  street: String!
  zipCode: String!
}

"""Dados necessários para a criação de um novo pedido."""
input CreateOrderGraphQLInput {
  """Endereço de cobrança do cliente."""
  billingAddress: BillingAddressInput!

  """Moeda utilizada no pedido."""
  currency: String!

  """ID do cliente responsável pela compra."""
  customerId: String!

  """Desconto geral aplicado ao pedido."""
  discount: DiscountInput

  """Lista de itens que compõem o pedido."""
  items: [OrderItemInput!]!

  """Observações adicionais fornecidas pelo cliente ou sistema."""
  notes: String

  """ID do pagamento associado."""
  paymentId: String!

  """Informações do pagamento no momento da compra."""
  paymentSnapshot: PaymentSnapshotInput!

  """Detalhes da logística e envio do pedido."""
  shippingSnapshot: ShippingSnapshotInput!

  """Status inicial do pedido (ex: pending, paid)."""
  status: String!
}

type CursorPaginatedOrderResult {
  hasNextPage: Boolean!
  items: [OrderOuput!]!
  nextCursor: String
  total: Float!
  type: String!
}

input CursorPaginationInput {
  after: String
  limit: Int = 10
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Informações de desconto aplicável à compra."""
input DiscountInput {
  """Código do cupom de desconto."""
  couponCode: String!

  """Moeda usada no desconto."""
  currency: String!

  """Tipo do desconto (percentage ou fixed)."""
  type: String!

  """Valor do desconto aplicado."""
  value: Float!
}

"""Representa uma composição do Order"""
type DiscountOutput {
  couponCode: String!
  currency: String!
  type: String!
  value: Float!
}

input InstallmentInput {
  dueDate: String
  interestRate: Float
  number: Float!
  totalValue: Float
  value: Float!
}

type InstallmentOutput {
  dueDate: String!
  interestRate: Float!
  number: Float!
  totalValue: Float!
  value: Float!
}

"""Representa um valor monetário com moeda e quantia."""
input MoneyInput {
  """Quantia monetária (ex: 99.99)."""
  amount: Float!

  """Código da moeda (ex: BRL, USD)."""
  currency: String!
}

"""Representa o objeto de valor, Money"""
type MoneyOutput {
  amount: Float!
  currency: String!
}

type Mutation {
  createOrder(input: CreateOrderGraphQLInput!): OrderOuput!
  deleteOrder(id: String!): Boolean!
}

type OffsetPaginatedOrderResult {
  currentPage: Float!
  items: [OrderOuput!]!
  lastPage: Float!
  perPage: Float!
  total: Float!
  type: String!
}

input OffsetPaginationInput {
  limit: Int
  page: Int = 1
}

input OrderFilterInput {
  customerId: String
  status: String
}

"""Item que compõe o pedido."""
input OrderItemInput {
  """Descrição do produto."""
  description: String

  """Desconto aplicado ao item, se houver."""
  discount: DiscountInput

  """URL da imagem do produto."""
  imageUrl: String

  """Preço unitário do produto."""
  price: MoneyInput!

  """ID do produto."""
  productId: String!

  """Quantidade desejada do produto."""
  quantity: Float!

  """Identificador do vendedor, se aplicável."""
  seller: String

  """ID do envio (caso item tenha logística individual)."""
  shippingId: String

  """Título do produto."""
  title: String
}

type OrderItemOutput {
  active: Boolean
  createdAt: DateTime
  deleted: Boolean
  deletedAt: DateTime
  description: String
  discount: DiscountOutput
  id: String
  imageUrl: String
  price: MoneyOutput!
  productId: String!
  quantity: Float!
  seller: String
  shippingId: String
  title: String
  updatedAt: DateTime
}

type OrderOuput {
  active: Boolean
  billingAddress: BillingAddressOutput!
  createdAt: DateTime
  currency: String!
  customerId: String!
  deleted: Boolean
  deletedAt: DateTime
  discount: DiscountOutput
  id: String
  items: [OrderItemOutput!]!
  notes: String
  paymentId: String!
  paymentSnapshot: PaymentOutput!
  shippingSnapshot: ShippingOutput!
  status: String!
  subTotal: Float!
  total: Float!
  updatedAt: DateTime
}

input OrderSortInput {
  direction: SortDirection!
  field: String!
}

"""Possible order statuses"""
enum OrderStatus {
  AWAITING_SHIPMENT
  CANCELLED
  DELIVERED
  PAID
  PENDING
  SHIPPED
}

type OrderStatusUpdateType {
  orderId: String!
  status: OrderStatus!
}

union PaginatedOrderResult = CursorPaginatedOrderResult | OffsetPaginatedOrderResult

input PaginationInput {
  cursor: CursorPaginationInput
  offset: OffsetPaginationInput
  type: String!
}

type PaymentOutput {
  amount: Float!
  installments: [InstallmentOutput!]
  method: String!
  status: String!
  transactionId: String!
}

input PaymentSnapshotInput {
  amount: Float!
  installments: [InstallmentInput!]
  method: String!
  status: String!
  transactionId: String
}

type Query {
  findAllOrders: [OrderOuput!]!
  findOrderById(id: String!): OrderOuput
  healthCheck: String!
  searchOrders(filter: OrderFilterInput, pagination: PaginationInput, sort: OrderSortInput): PaginatedOrderResult!
}

type ShippingOutput {
  carrier: String!
  deliveryDate: String!
  fee: Float!
  recipient: String!
  service: String!
  shippingId: String!
  status: String!
}

input ShippingSnapshotInput {
  carrier: String!
  deliveryDate: String
  fee: Float
  recipient: String
  service: String!
  shippingId: String
  status: String!
}

enum SortDirection {
  ASC
  DESC
}

type Subscription {
  orderUpdated(orderId: String!): OrderStatusUpdateType!
}